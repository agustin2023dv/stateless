{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\agust\\\\stateless\\\\client\\\\src\\\\pages\\\\Landing.js\",\n  _s = $RefreshSig$();\nimport '../assets/styles/Styles.css';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { useState } from 'react'; // Import useState\nimport { db, auth } from '../firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore'; // Import serverTimestamp\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Landing() {\n  _s();\n  const [title, setTitle] = useState(''); // Define title and description using useState\n  const [description, setDescription] = useState('');\n  const [imageFile, setImageFile] = useState(null); // Define imageFile\n\n  const addPostToFirestore = async (title, description, photo, postId, uid) => {\n    try {\n      // Reference the \"post\" collection\n      const postCollection = collection(db, 'post');\n\n      // Add a new document with the post data and the current timestamp\n      const docRef = await addDoc(postCollection, {\n        title,\n        description,\n        photo,\n        postId,\n        uid,\n        createdAt: serverTimestamp() // Include the current timestamp\n      });\n      console.log('Post added with ID: ', docRef.id);\n      return docRef.id; // Return the ID of the newly added post\n    } catch (error) {\n      console.error('Error adding post: ', error);\n      throw error; // Handle the error appropriately in your application\n    }\n  };\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n  const handleDescriptionChange = e => {\n    setDescription(e.target.value);\n  };\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    setImageFile(file);\n  };\n  const uploadImageToStorage = async imageFile => {\n    try {\n      // Create a reference to the Firebase Storage bucket and specify a unique filename\n      const storageRef = ref(db, `images/${Date.now()}_${imageFile.name}`);\n\n      // Upload the image file to Firebase Storage\n      await uploadBytes(storageRef, imageFile);\n\n      // Get the download URL for the uploaded image\n      const downloadURL = await getDownloadURL(storageRef);\n      return downloadURL; // Return the download URL of the uploaded image\n    } catch (error) {\n      console.error('Error uploading image: ', error);\n      throw error; // Handle the error appropriately in your application\n    }\n  };\n\n  // Use the uploadImageToStorage function in your handleSubmit function\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Upload the image to a storage service like Firebase Storage\n    if (imageFile) {\n      const imageUrl = await uploadImageToStorage(imageFile);\n\n      // Get the UID of the currently logged-in user\n      const userUID = auth.currentUser.uid;\n\n      // Generate a unique postId (you can use any method you prefer)\n      const postId = generateUniquePostId(); // Implement this function\n\n      // Add the post to Firestore with the image URL, user UID, and createdAt timestamp\n      await addPostToFirestore(title, description, imageUrl, postId, userUID);\n    }\n  };\n\n  // Implement a function to generate a unique postId\n  const generateUniquePostId = () => {\n    // Generate a unique postId using your preferred method\n    // For example, you can use a combination of timestamp and random numbers\n    const timestamp = Date.now();\n    const random = Math.floor(Math.random() * 1000); // Adjust as needed\n    return `${timestamp}_${random}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          name: \"title\",\n          onChange: handleTitleChange,\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          onChange: handleDescriptionChange,\n          value: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"image\",\n          name: \"image\",\n          accept: \"image/*\",\n          onChange: handleImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Landing, \"WztfjbTBVZEFrWR/ynuHpJ906vY=\");\n_c = Landing;\nexport default Landing;\nvar _c;\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["Header","Footer","useState","db","auth","collection","addDoc","serverTimestamp","jsxDEV","_jsxDEV","Fragment","_Fragment","Landing","_s","title","setTitle","description","setDescription","imageFile","setImageFile","addPostToFirestore","photo","postId","uid","postCollection","docRef","createdAt","console","log","id","error","handleTitleChange","e","target","value","handleDescriptionChange","handleImageChange","file","files","uploadImageToStorage","storageRef","ref","Date","now","name","uploadBytes","downloadURL","getDownloadURL","handleSubmit","preventDefault","imageUrl","userUID","currentUser","generateUniquePostId","timestamp","random","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","htmlFor","type","onChange","accept","_c","$RefreshReg$"],"sources":["C:/Users/agust/stateless/client/src/pages/Landing.js"],"sourcesContent":["import '../assets/styles/Styles.css';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport { useState } from 'react'; // Import useState\nimport { db, auth } from '../firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore'; // Import serverTimestamp\n\nfunction Landing() {\n  const [title, setTitle] = useState(''); // Define title and description using useState\n  const [description, setDescription] = useState('');\n  const [imageFile, setImageFile] = useState(null); // Define imageFile\n\n  const addPostToFirestore = async (title, description, photo, postId, uid) => {\n    try {\n      // Reference the \"post\" collection\n      const postCollection = collection(db, 'post');\n\n      // Add a new document with the post data and the current timestamp\n      const docRef = await addDoc(postCollection, {\n        title,\n        description,\n        photo,\n        postId,\n        uid,\n        createdAt: serverTimestamp(), // Include the current timestamp\n      });\n\n      console.log('Post added with ID: ', docRef.id);\n      return docRef.id; // Return the ID of the newly added post\n    } catch (error) {\n      console.error('Error adding post: ', error);\n      throw error; // Handle the error appropriately in your application\n    }\n  };\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    setImageFile(file);\n  };\n\n  const uploadImageToStorage = async (imageFile) => {\n    try {\n      // Create a reference to the Firebase Storage bucket and specify a unique filename\n      const storageRef = ref(db, `images/${Date.now()}_${imageFile.name}`);\n\n      // Upload the image file to Firebase Storage\n      await uploadBytes(storageRef, imageFile);\n\n      // Get the download URL for the uploaded image\n      const downloadURL = await getDownloadURL(storageRef);\n\n      return downloadURL; // Return the download URL of the uploaded image\n    } catch (error) {\n      console.error('Error uploading image: ', error);\n      throw error; // Handle the error appropriately in your application\n    }\n  };\n\n  // Use the uploadImageToStorage function in your handleSubmit function\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Upload the image to a storage service like Firebase Storage\n    if (imageFile) {\n      const imageUrl = await uploadImageToStorage(imageFile);\n\n      // Get the UID of the currently logged-in user\n      const userUID = auth.currentUser.uid;\n\n      // Generate a unique postId (you can use any method you prefer)\n      const postId = generateUniquePostId(); // Implement this function\n\n      // Add the post to Firestore with the image URL, user UID, and createdAt timestamp\n      await addPostToFirestore(title, description, imageUrl, postId, userUID);\n    }\n  };\n\n  // Implement a function to generate a unique postId\n  const generateUniquePostId = () => {\n    // Generate a unique postId using your preferred method\n    // For example, you can use a combination of timestamp and random numbers\n    const timestamp = Date.now();\n    const random = Math.floor(Math.random() * 1000); // Adjust as needed\n    return `${timestamp}_${random}`;\n  };\n\n  return (\n    <>\n      <Header />\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" id=\"title\" name=\"title\" onChange={handleTitleChange} value={title} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description</label>\n          <textarea id=\"description\" name=\"description\" onChange={handleDescriptionChange} value={description}></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"image\">Image</label>\n          <input type=\"file\" id=\"image\" name=\"image\" accept=\"image/*\" onChange={handleImageChange} />\n        </div>\n        <button type=\"submit\">Upload</button>\n      </form>\n\n      <Footer />\n    </>\n  );\n}\n\nexport default Landing;\n"],"mappings":";;AAAA,OAAO,6BAA6B;AACpC,OAAOA,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AAClC,SAASC,EAAE,EAAEC,IAAI,QAAQ,aAAa;AACtC,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1E,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMkB,kBAAkB,GAAG,MAAAA,CAAON,KAAK,EAAEE,WAAW,EAAEK,KAAK,EAAEC,MAAM,EAAEC,GAAG,KAAK;IAC3E,IAAI;MACF;MACA,MAAMC,cAAc,GAAGnB,UAAU,CAACF,EAAE,EAAE,MAAM,CAAC;;MAE7C;MACA,MAAMsB,MAAM,GAAG,MAAMnB,MAAM,CAACkB,cAAc,EAAE;QAC1CV,KAAK;QACLE,WAAW;QACXK,KAAK;QACLC,MAAM;QACNC,GAAG;QACHG,SAAS,EAAEnB,eAAe,CAAC,CAAC,CAAE;MAChC,CAAC,CAAC;MAEFoB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,MAAM,CAACI,EAAE,CAAC;MAC9C,OAAOJ,MAAM,CAACI,EAAE,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/BjB,QAAQ,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,uBAAuB,GAAIH,CAAC,IAAK;IACrCf,cAAc,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAME,iBAAiB,GAAIJ,CAAC,IAAK;IAC/B,MAAMK,IAAI,GAAGL,CAAC,CAACC,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;IAC9BnB,YAAY,CAACkB,IAAI,CAAC;EACpB,CAAC;EAED,MAAME,oBAAoB,GAAG,MAAOrB,SAAS,IAAK;IAChD,IAAI;MACF;MACA,MAAMsB,UAAU,GAAGC,GAAG,CAACtC,EAAE,EAAG,UAASuC,IAAI,CAACC,GAAG,CAAC,CAAE,IAAGzB,SAAS,CAAC0B,IAAK,EAAC,CAAC;;MAEpE;MACA,MAAMC,WAAW,CAACL,UAAU,EAAEtB,SAAS,CAAC;;MAExC;MACA,MAAM4B,WAAW,GAAG,MAAMC,cAAc,CAACP,UAAU,CAAC;MAEpD,OAAOM,WAAW,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMkB,YAAY,GAAG,MAAOhB,CAAC,IAAK;IAChCA,CAAC,CAACiB,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI/B,SAAS,EAAE;MACb,MAAMgC,QAAQ,GAAG,MAAMX,oBAAoB,CAACrB,SAAS,CAAC;;MAEtD;MACA,MAAMiC,OAAO,GAAG/C,IAAI,CAACgD,WAAW,CAAC7B,GAAG;;MAEpC;MACA,MAAMD,MAAM,GAAG+B,oBAAoB,CAAC,CAAC,CAAC,CAAC;;MAEvC;MACA,MAAMjC,kBAAkB,CAACN,KAAK,EAAEE,WAAW,EAAEkC,QAAQ,EAAE5B,MAAM,EAAE6B,OAAO,CAAC;IACzE;EACF,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA;IACA,MAAMC,SAAS,GAAGZ,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5B,MAAMY,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACjD,OAAQ,GAAED,SAAU,IAAGC,MAAO,EAAC;EACjC,CAAC;EAED,oBACE9C,OAAA,CAAAE,SAAA;IAAA+C,QAAA,gBACEjD,OAAA,CAACT,MAAM;MAAA2D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVrD,OAAA;MAAMsD,QAAQ,EAAEf,YAAa;MAAAU,QAAA,gBAC3BjD,OAAA;QAAKuD,SAAS,EAAC,YAAY;QAAAN,QAAA,gBACzBjD,OAAA;UAAOwD,OAAO,EAAC,OAAO;UAAAP,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpCrD,OAAA;UAAOyD,IAAI,EAAC,MAAM;UAACrC,EAAE,EAAC,OAAO;UAACe,IAAI,EAAC,OAAO;UAACuB,QAAQ,EAAEpC,iBAAkB;UAACG,KAAK,EAAEpB;QAAM;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrF,CAAC,eACNrD,OAAA;QAAKuD,SAAS,EAAC,YAAY;QAAAN,QAAA,gBACzBjD,OAAA;UAAOwD,OAAO,EAAC,aAAa;UAAAP,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChDrD,OAAA;UAAUoB,EAAE,EAAC,aAAa;UAACe,IAAI,EAAC,aAAa;UAACuB,QAAQ,EAAEhC,uBAAwB;UAACD,KAAK,EAAElB;QAAY;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7G,CAAC,eACNrD,OAAA;QAAKuD,SAAS,EAAC,YAAY;QAAAN,QAAA,gBACzBjD,OAAA;UAAOwD,OAAO,EAAC,OAAO;UAAAP,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpCrD,OAAA;UAAOyD,IAAI,EAAC,MAAM;UAACrC,EAAE,EAAC,OAAO;UAACe,IAAI,EAAC,OAAO;UAACwB,MAAM,EAAC,SAAS;UAACD,QAAQ,EAAE/B;QAAkB;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxF,CAAC,eACNrD,OAAA;QAAQyD,IAAI,EAAC,QAAQ;QAAAR,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eAEPrD,OAAA,CAACR,MAAM;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACV,CAAC;AAEP;AAACjD,EAAA,CA9GQD,OAAO;AAAAyD,EAAA,GAAPzD,OAAO;AAgHhB,eAAeA,OAAO;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}